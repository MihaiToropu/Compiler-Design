package jflex;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    @Deprecated
    public parser() {super();}

    /** Constructor which sets the default scanner. */
    @Deprecated
    public parser(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\100\000\002\002\004\000\002\002\003\000\002\002" +
                            "\002\000\002\003\004\000\002\003\003\000\002\004\003" +
                            "\000\002\004\003\000\002\005\005\000\002\005\010\000" +
                            "\002\006\003\000\002\006\003\000\002\007\010\000\002" +
                            "\010\003\000\002\010\003\000\002\011\005\000\002\011" +
                            "\003\000\002\012\004\000\002\012\006\000\002\013\006" +
                            "\000\002\014\004\000\002\014\002\000\002\015\004\000" +
                            "\002\015\002\000\002\016\003\000\002\016\003\000\002" +
                            "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
                            "\004\000\002\017\003\000\002\020\007\000\002\020\011" +
                            "\000\002\021\007\000\002\022\004\000\002\022\005\000" +
                            "\002\023\005\000\002\023\003\000\002\024\003\000\002" +
                            "\024\006\000\002\025\005\000\002\025\003\000\002\026" +
                            "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
                            "\000\002\026\003\000\002\026\003\000\002\027\005\000" +
                            "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
                            "\031\005\000\002\031\003\000\002\032\003\000\002\032" +
                            "\003\000\002\033\005\000\002\033\003\000\002\033\003" +
                            "\000\002\033\003\000\002\034\006\000\002\035\003\000" +
                            "\002\035\002\000\002\036\005\000\002\036\003" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\146\000\010\002\uffff\006\012\010\010\001\002\000" +
                            "\004\002\150\001\002\000\010\002\ufffb\006\ufffb\010\ufffb" +
                            "\001\002\000\010\002\ufffc\006\ufffc\010\ufffc\001\002\000" +
                            "\010\002\000\006\012\010\010\001\002\000\004\035\ufff7" +
                            "\001\002\000\004\035\014\001\002\000\004\035\ufff8\001" +
                            "\002\000\010\002\ufffd\006\ufffd\010\ufffd\001\002\000\010" +
                            "\025\016\027\017\031\015\001\002\000\004\036\144\001" +
                            "\002\000\032\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
                            "\011\ufffa\025\ufffa\027\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
                            "\ufffa\001\002\000\006\006\012\010\022\001\002\000\006" +
                            "\026\142\030\ufff5\001\002\000\006\026\ufff2\030\ufff2\001" +
                            "\002\000\006\030\ufff4\035\ufff7\001\002\000\004\035\137" +
                            "\001\002\000\004\030\025\001\002\000\004\033\027\001" +
                            "\002\000\010\002\ufff6\006\ufff6\010\ufff6\001\002\000\030" +
                            "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\025\uffed\027" +
                            "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\001\002\000\030" +
                            "\005\uffeb\006\012\007\uffeb\010\010\011\uffeb\025\uffeb\027" +
                            "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\001\002\000\024" +
                            "\005\042\007\040\011\036\025\037\027\043\033\027\034" +
                            "\046\035\044\036\045\001\002\000\030\005\uffee\006\uffee" +
                            "\007\uffee\010\uffee\011\uffee\025\uffee\027\uffee\033\uffee\034" +
                            "\uffee\035\uffee\036\uffee\001\002\000\004\035\034\001\002" +
                            "\000\006\025\016\031\015\001\002\000\024\005\uffec\007" +
                            "\uffec\011\uffec\025\uffec\027\uffec\033\uffec\034\uffec\035\uffec" +
                            "\036\uffec\001\002\000\004\027\133\001\002\000\026\004" +
                            "\uffe4\005\uffe4\007\uffe4\011\uffe4\025\uffe4\027\uffe4\033\uffe4" +
                            "\034\uffe4\035\uffe4\036\uffe4\001\002\000\012\025\130\027" +
                            "\043\035\044\036\045\001\002\000\026\004\uffe9\005\uffe9" +
                            "\007\uffe9\011\uffe9\025\uffe9\027\uffe9\033\uffe9\034\uffe9\035" +
                            "\uffe9\036\uffe9\001\002\000\004\027\122\001\002\000\010" +
                            "\027\043\035\044\036\045\001\002\000\044\012\uffdc\013" +
                            "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
                            "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\107\030" +
                            "\uffdc\031\106\032\uffdc\001\002\000\036\012\uffc7\013\uffc7" +
                            "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
                            "\uffc7\023\uffc7\025\uffc7\026\uffc7\030\uffc7\032\uffc7\001\002" +
                            "\000\034\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
                            "\uffef\011\uffef\025\uffef\027\uffef\033\uffef\034\uffef\035\uffef" +
                            "\036\uffef\001\002\000\026\004\uffe6\005\uffe6\007\uffe6\011" +
                            "\uffe6\025\uffe6\027\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
                            "\001\002\000\004\025\105\001\002\000\036\012\uffcd\013" +
                            "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
                            "\022\uffcd\023\uffcd\025\uffcd\026\uffcd\030\uffcd\032\uffcd\001" +
                            "\002\000\032\012\072\013\073\016\101\017\074\020\102" +
                            "\021\071\022\100\023\075\025\uffd9\026\uffd9\030\uffd9\032" +
                            "\uffd9\001\002\000\036\012\uffd1\013\uffd1\014\064\015\066" +
                            "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\025" +
                            "\uffd1\026\uffd1\030\uffd1\032\uffd1\001\002\000\012\025\uffdd" +
                            "\026\uffdd\030\uffdd\032\uffdd\001\002\000\026\004\uffea\005" +
                            "\uffea\007\uffea\011\uffea\025\uffea\027\uffea\033\uffea\034\uffea" +
                            "\035\uffea\036\uffea\001\002\000\026\004\uffe8\005\uffe8\007" +
                            "\uffe8\011\uffe8\025\uffe8\027\uffe8\033\uffe8\034\uffe8\035\uffe8" +
                            "\036\uffe8\001\002\000\026\004\uffe7\005\uffe7\007\uffe7\011" +
                            "\uffe7\025\uffe7\027\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
                            "\001\002\000\036\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
                            "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8" +
                            "\026\uffc8\030\uffc8\032\uffc8\001\002\000\040\012\uffc9\013" +
                            "\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
                            "\022\uffc9\023\uffc9\024\062\025\uffc9\026\uffc9\030\uffc9\032" +
                            "\uffc9\001\002\000\010\027\043\035\044\036\045\001\002" +
                            "\000\012\025\uffde\026\uffde\030\uffde\032\uffde\001\002\000" +
                            "\010\027\uffcc\035\uffcc\036\uffcc\001\002\000\010\027\043" +
                            "\035\044\036\045\001\002\000\010\027\uffcb\035\uffcb\036" +
                            "\uffcb\001\002\000\036\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
                            "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\025" +
                            "\uffc9\026\uffc9\030\uffc9\032\uffc9\001\002\000\036\012\uffce" +
                            "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
                            "\uffce\022\uffce\023\uffce\025\uffce\026\uffce\030\uffce\032\uffce" +
                            "\001\002\000\010\027\uffd5\035\uffd5\036\uffd5\001\002\000" +
                            "\010\027\uffd0\035\uffd0\036\uffd0\001\002\000\010\027\uffcf" +
                            "\035\uffcf\036\uffcf\001\002\000\010\027\uffd6\035\uffd6\036" +
                            "\uffd6\001\002\000\010\027\uffd3\035\uffd3\036\uffd3\001\002" +
                            "\000\010\027\043\035\044\036\045\001\002\000\010\027" +
                            "\043\035\044\036\045\001\002\000\010\027\uffd4\035\uffd4" +
                            "\036\uffd4\001\002\000\010\027\uffd7\035\uffd7\036\uffd7\001" +
                            "\002\000\010\027\uffd8\035\uffd8\036\uffd8\001\002\000\036" +
                            "\012\uffd2\013\uffd2\014\064\015\066\016\uffd2\017\uffd2\020" +
                            "\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2\030\uffd2" +
                            "\032\uffd2\001\002\000\016\012\072\013\073\025\uffda\026" +
                            "\uffda\030\uffda\032\uffda\001\002\000\026\004\uffe5\005\uffe5" +
                            "\007\uffe5\011\uffe5\025\uffe5\027\uffe5\033\uffe5\034\uffe5\035" +
                            "\uffe5\036\uffe5\001\002\000\010\027\043\035\044\036\045" +
                            "\001\002\000\012\027\043\030\uffc4\035\044\036\045\001" +
                            "\002\000\006\026\114\030\uffc5\001\002\000\004\030\113" +
                            "\001\002\000\006\026\uffc2\030\uffc2\001\002\000\036\012" +
                            "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
                            "\021\uffc6\022\uffc6\023\uffc6\025\uffc6\026\uffc6\030\uffc6\032" +
                            "\uffc6\001\002\000\010\027\043\035\044\036\045\001\002" +
                            "\000\006\026\uffc3\030\uffc3\001\002\000\004\032\117\001" +
                            "\002\000\040\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
                            "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
                            "\uffdb\026\uffdb\030\uffdb\032\uffdb\001\002\000\004\030\121" +
                            "\001\002\000\036\012\uffca\013\uffca\014\uffca\015\uffca\016" +
                            "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\025\uffca" +
                            "\026\uffca\030\uffca\032\uffca\001\002\000\010\027\043\035" +
                            "\044\036\045\001\002\000\004\030\124\001\002\000\022" +
                            "\005\042\007\040\011\036\025\037\027\043\033\027\035" +
                            "\044\036\045\001\002\000\026\004\126\005\uffe3\007\uffe3" +
                            "\011\uffe3\025\uffe3\027\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
                            "\uffe3\001\002\000\022\005\042\007\040\011\036\025\037" +
                            "\027\043\033\027\035\044\036\045\001\002\000\026\004" +
                            "\uffe2\005\uffe2\007\uffe2\011\uffe2\025\uffe2\027\uffe2\033\uffe2" +
                            "\034\uffe2\035\uffe2\036\uffe2\001\002\000\026\004\uffe0\005" +
                            "\uffe0\007\uffe0\011\uffe0\025\uffe0\027\uffe0\033\uffe0\034\uffe0" +
                            "\035\uffe0\036\uffe0\001\002\000\004\025\132\001\002\000" +
                            "\026\004\uffdf\005\uffdf\007\uffdf\011\uffdf\025\uffdf\027\uffdf" +
                            "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\001\002\000\010\027" +
                            "\043\035\044\036\045\001\002\000\004\030\135\001\002" +
                            "\000\022\005\042\007\040\011\036\025\037\027\043\033" +
                            "\027\035\044\036\045\001\002\000\026\004\uffe1\005\uffe1" +
                            "\007\uffe1\011\uffe1\025\uffe1\027\uffe1\033\uffe1\034\uffe1\035" +
                            "\uffe1\036\uffe1\001\002\000\010\026\ufff1\030\ufff1\031\140" +
                            "\001\002\000\004\032\141\001\002\000\006\026\ufff0\030" +
                            "\ufff0\001\002\000\006\006\012\010\010\001\002\000\006" +
                            "\026\ufff3\030\ufff3\001\002\000\004\032\145\001\002\000" +
                            "\004\025\146\001\002\000\032\002\ufff9\005\ufff9\006\ufff9" +
                            "\007\ufff9\010\ufff9\011\ufff9\025\ufff9\027\ufff9\033\ufff9\034" +
                            "\ufff9\035\ufff9\036\ufff9\001\002\000\010\002\ufffe\006\ufffe" +
                            "\010\ufffe\001\002\000\004\002\001\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\146\000\016\002\003\003\006\004\012\005\005\006" +
                            "\010\007\004\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\012\004\146\005\005\006\010\007" +
                            "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\012\006\022\010\023\011\017" +
                            "\012\020\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\013\025\001\001\000\002\001\001\000\004\014\027\001" +
                            "\001\000\010\005\031\006\032\015\030\001\001\000\034" +
                            "\013\040\016\034\017\054\020\055\021\056\022\046\023" +
                            "\047\024\060\025\053\027\051\031\052\033\050\034\057" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\020\023\130\024\060\025\053\027\051\031\052\033" +
                            "\050\034\057\001\001\000\002\001\001\000\002\001\001" +
                            "\000\020\023\117\024\060\025\053\027\051\031\052\033" +
                            "\050\034\057\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\026\075\030\076\001\001\000\004" +
                            "\032\064\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\020\023\062\024\060\025\053\027\051\031" +
                            "\052\033\050\034\057\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\024\066\033\067\034\057\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\014\024\066\027\103\031\052" +
                            "\033\050\034\057\001\001\000\012\024\066\031\102\033" +
                            "\050\034\057\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\032\064\001\001\000\004\030" +
                            "\076\001\001\000\002\001\001\000\020\023\115\024\060" +
                            "\025\053\027\051\031\052\033\050\034\057\001\001\000" +
                            "\024\023\111\024\060\025\053\027\051\031\052\033\050" +
                            "\034\057\035\110\036\107\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
                            "\023\114\024\060\025\053\027\051\031\052\033\050\034" +
                            "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\020\023" +
                            "\122\024\060\025\053\027\051\031\052\033\050\034\057" +
                            "\001\001\000\002\001\001\000\034\013\040\016\124\017" +
                            "\054\020\055\021\056\022\046\023\047\024\060\025\053" +
                            "\027\051\031\052\033\050\034\057\001\001\000\002\001" +
                            "\001\000\034\013\040\016\126\017\054\020\055\021\056" +
                            "\022\046\023\047\024\060\025\053\027\051\031\052\033" +
                            "\050\034\057\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\020\023\133\024" +
                            "\060\025\053\027\051\031\052\033\050\034\057\001\001" +
                            "\000\002\001\001\000\034\013\040\016\135\017\054\020" +
                            "\055\021\056\022\046\023\047\024\060\025\053\027\051" +
                            "\031\052\033\050\034\057\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
                            "\006\022\012\142\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 0;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}


    /** Scan to get the next Symbol. */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception
    {
        return lexer.next_token();
    }


    LexerCMinus lexer;

    public parser(LexerCMinus lexer) {
        this.lexer = lexer;
    }

    public void report_error(String message, Object info) {

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {

                m.append(" in line "+(s.left+1));

                if (s.right >= 0)

                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$parser$actions {
        private final parser parser;

        /** Constructor */
        CUP$parser$actions(parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

            /* select the action based on the action number */
            switch (CUP$parser$act_num)
            {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= program EOF
                {
                    Object RESULT =null;
                    int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = start_val;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // program ::= declaration_list
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // program ::=
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // declaration_list ::= declaration_list declaration
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // declaration_list ::= declaration
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // declaration ::= var_declaration
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // declaration ::= fun_declaration
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // var_declaration ::= type_specifier ID SEMI
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // var_declaration ::= type_specifier ID LSQBKT NUMERIC_CONSTANT RSQBKT SEMI
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // type_specifier ::= INT
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // type_specifier ::= VOID
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // fun_declaration ::= type_specifier ID LPAREN params RPAREN compound_stmt
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // params ::= param_list
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // params ::= VOID
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // param_list ::= param_list COMMA param
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // param_list ::= param
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // param ::= type_specifier ID
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // param ::= type_specifier ID LSQBKT RSQBKT
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // compound_stmt ::= LBRKT local_declarations statement_list RBRKT
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // local_declarations ::= local_declarations var_declaration
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // local_declarations ::=
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // statement_list ::= statement_list statement
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // statement_list ::=
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // statement ::= expression_stmt
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // statement ::= compound_stmt
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // statement ::= selection_stmt
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // statement ::= iteration_stmt
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // statement ::= return_stmt
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // expression_stmt ::= expression SEMI
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // expression_stmt ::= SEMI
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // selection_stmt ::= IF LPAREN expression RPAREN statement
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // selection_stmt ::= IF LPAREN expression RPAREN statement ELSE statement
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // iteration_stmt ::= WHILE LPAREN expression RPAREN statement
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // return_stmt ::= RETURN SEMI
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // return_stmt ::= RETURN expression SEMI
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // expression ::= var EQL expression
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // expression ::= simple_expression
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // var ::= ID
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // var ::= ID LSQBKT expression RSQBKT
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // simple_expression ::= additive_expression relop additive_expression
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // simple_expression ::= additive_expression
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // relop ::= LTOET
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // relop ::= LT
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // relop ::= GT
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // relop ::= GTOET
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // relop ::= DEQL
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // relop ::= NOTEQL
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // additive_expression ::= additive_expression addop term
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // additive_expression ::= term
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // addop ::= ADD
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // addop ::= SUB
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // term ::= term mulop factor
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // term ::= factor
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // mulop ::= MULT
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // mulop ::= DIV
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // factor ::= LPAREN expression RPAREN
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // factor ::= var
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // factor ::= call
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // factor ::= NUMERIC_CONSTANT
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // call ::= ID LPAREN args RPAREN
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // args ::= arg_list
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("args",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // args ::=
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("args",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // arg_list ::= arg_list COMMA expression
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // arg_list ::= expression
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$parser$do_action(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
            return CUP$parser$do_action_part00000000(
                    CUP$parser$act_num,
                    CUP$parser$parser,
                    CUP$parser$stack,
                    CUP$parser$top);
        }
    }

}
